From 9eea226dc3be928ae297ff2d7284a43f8e43efac Mon Sep 17 00:00:00 2001
From: Artem Senichev <a.senichev@yadro.com>
Date: Tue, 13 Mar 2018 15:32:45 +0300
Subject: [PATCH] Force print MCS grouping info to console

Used to dump interleave mode state.

Signed-off-by: Artem Senichev <a.senichev@yadro.com>
---
 .../mc_config/mss_eff_config/mss_eff_grouping.C    | 25 +++++++++++++---------
 1 file changed, 15 insertions(+), 10 deletions(-)

diff --git a/src/usr/hwpf/hwp/mc_config/mss_eff_config/mss_eff_grouping.C b/src/usr/hwpf/hwp/mc_config/mss_eff_config/mss_eff_grouping.C
index 98f76cd0a..fa4c78f72 100644
--- a/src/usr/hwpf/hwp/mc_config/mss_eff_config/mss_eff_grouping.C
+++ b/src/usr/hwpf/hwp/mc_config/mss_eff_config/mss_eff_grouping.C
@@ -85,6 +85,12 @@
 #include <mss_eff_grouping.H>
 #include <cen_scom_addresses.H>
 #include <mss_error_support.H>
+#include <console/consoleif.H>
+
+#define GRP_TRACE(_fmt_, _args_...) { \
+    CONSOLE::displayf(NULL, "GROUP-INFO| " _fmt_, ##_args_); \
+    CONSOLE::flush(); \
+}
 
 extern "C"
 {
@@ -900,10 +906,10 @@ void grouping_group4McsPerGroup(const EffGroupingMemInfo & i_memInfo,
     {
         if (config4_gp[i] && config4_gp[i + 1])
         {
-            FAPI_INF("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
+            GRP_TRACE("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
                      CFG_4MCS[i][0], CFG_4MCS[i][1],
                      CFG_4MCS[i][2], CFG_4MCS[i][3]);
-            FAPI_INF("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
+            GRP_TRACE("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
                      CFG_4MCS[i + 1][0], CFG_4MCS[i + 1][1],
                      CFG_4MCS[i + 1][2], CFG_4MCS[1 + 1][3]);
             gp1 = i;
@@ -919,7 +925,7 @@ void grouping_group4McsPerGroup(const EffGroupingMemInfo & i_memInfo,
         {
             if (config4_gp[i])
             {
-                FAPI_INF("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
+                GRP_TRACE("mss_eff_grouping: Grouped MCSs %u, %u, %u, %u",
                          CFG_4MCS[i][0], CFG_4MCS[i][1],
                          CFG_4MCS[i][2], CFG_4MCS[i][3]);
                 gp1 = i;
@@ -1024,7 +1030,7 @@ void grouping_group2McsPerGroup(const EffGroupingMemInfo & i_memInfo,
         {
             // These 2 MCSs are not already grouped and have the same amount of
             // memory
-            FAPI_INF("mss_eff_grouping: Grouped MCSs %u and %u", pos, pos + 1);
+            GRP_TRACE("mss_eff_grouping: Grouped MCSs %u and %u", pos, pos + 1);
             o_groupData.iv_data[g][MCS_SIZE] = i_memInfo.iv_mcsSize[pos];
             o_groupData.iv_data[g][MCS_IN_GROUP] = 2;
             o_groupData.iv_data[g][GROUP_SIZE] = 2 * i_memInfo.iv_mcsSize[pos];
@@ -1084,7 +1090,7 @@ void grouping_group2McsPerGroup_oddpair(const EffGroupingMemInfo & i_memInfo,
         {
             // These 2 MCSs are not already grouped and have the same amount of
             // memory
-            FAPI_INF("mss_eff_grouping: Grouped MCSs %u and %u", pos, pos + 1);
+            GRP_TRACE("mss_eff_grouping: Grouped MCSs %u and %u", pos, pos + 1);
             o_groupData.iv_data[g][MCS_SIZE] = i_memInfo.iv_mcsSize[pos];
             o_groupData.iv_data[g][MCS_IN_GROUP] = 2;
             o_groupData.iv_data[g][GROUP_SIZE] = 2 * i_memInfo.iv_mcsSize[pos];
@@ -1145,7 +1151,7 @@ void grouping_group2McsPerGroup_usecase(const EffGroupingMemInfo & i_memInfo,
             {
                 // These 2 MCSs are not already grouped and have the same amount of
                 // memory
-                FAPI_INF("mss_eff_grouping: Grouped MCSs %u and %u", pos, var);
+                GRP_TRACE("mss_eff_grouping: Grouped MCSs %u and %u", pos, var);
                 o_groupData.iv_data[g][MCS_SIZE] = i_memInfo.iv_mcsSize[pos];
                 o_groupData.iv_data[g][MCS_IN_GROUP] = 2;
                 o_groupData.iv_data[g][GROUP_SIZE] = 2 * i_memInfo.iv_mcsSize[pos];
@@ -1199,7 +1205,7 @@ void grouping_group1McsPerGroup(const EffGroupingMemInfo & i_memInfo,
             (i_memInfo.iv_mcsSize[pos] != 0))
         {
             // This MCS is not already grouped and has memory
-            FAPI_INF("mss_eff_grouping: MCS %u grouped", pos);
+            GRP_TRACE("mss_eff_grouping: MCS %u grouped", pos);
             o_groupData.iv_data[g][MCS_SIZE] = i_memInfo.iv_mcsSize[pos];
             o_groupData.iv_data[g][MCS_IN_GROUP] = 1;
             o_groupData.iv_data[g][GROUP_SIZE] = i_memInfo.iv_mcsSize[pos];
@@ -1564,12 +1570,11 @@ void grouping_traceData(const EffGroupingSysAttrs & i_sysAttrs,
 {
     for (uint8_t i = 0; i < i_groupData.iv_numGroups; i++)
     {
-        FAPI_INF("mss_eff_grouping: Group %u, MCS Size %u GB, "
+        GRP_TRACE("mss_eff_grouping: Group %u, MCS Size %u GB, "
                  "Num MCSs %u, GroupSize %u GB", i,
                  i_groupData.iv_data[i][MCS_SIZE],
                  i_groupData.iv_data[i][MCS_IN_GROUP],
                  i_groupData.iv_data[i][GROUP_SIZE]);
-
         FAPI_INF("mss_eff_grouping: Group %u, Base Add 0x%08x", i,
                  i_groupData.iv_data[i][BASE_ADDR]);
 
@@ -2248,7 +2253,7 @@ fapi::ReturnCode mss_eff_grouping(const fapi::Target & i_target,
     std::vector<fapi::Target> &i_associated_centaurs)
 {
     fapi::ReturnCode rc;
-    FAPI_INF("mss_eff_grouping: Start, chip %s", i_target.toEcmdString());
+    GRP_TRACE("mss_eff_grouping: Start, chip %s", i_target.toEcmdString());
 
     do
     {
-- 
2.14.1

